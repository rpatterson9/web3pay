{"version":3,"file":"static/js/285.a610a3f9.chunk.js","mappings":"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","sources":["components/registration.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\nimport axios from 'axios';\nimport Loader from './Loader/Loader'\nimport { Link } from 'react-router-dom';\nimport Header from './includes/header';\nimport Footer from './includes/footer';\n\nconst Registration = () => {\n  const [validationError, setValidationError] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    password: '',\n    toc: true,\n  });\n  const [loaded, setLoaded] = useState(true);\n\n  const hasErrorFor = (field) => {\n    if (validationError) {\n      const error = (field in validationError);\n      if (error)\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  const renderErrorFor = (field) => {\n    if (hasErrorFor(field)) {\n      return (\n        <div className=\"error-wrapper\">\n          <span className='invalid-feedback'>\n            <strong>{validationError[field]}</strong>\n          </span>\n        </div>\n      )\n    }\n  }\n  const resetForm = () => setFormData({\n    name: '',\n    email: '',\n    phone: '',\n    password: '',\n    toc: true,\n  });\n  const [isChecked,setIsChecked] = useState(true);\n  const handleSubmit = async event => {\n    setLoaded(false)\n    event.preventDefault()\n    axios.post(`${process.env.REACT_APP_API_ENDPOINT}/register`, formData).then(res => {\n      resetForm();\n      setLoaded(true)\n      setValidationError([]);\n      Swal.fire({\n        icon: 'success',\n        title: `Thank you !`,\n        showConfirmButton: true,\n        // timer: 3000,\n        text: `${res?.data?.message}`\n      })\n    }).catch(err => {\n    \n      setLoaded(true)\n      Swal.fire({\n        icon: 'error',\n        title: `Oops!`,\n        showConfirmButton: true,\n        // timer: 3000,\n        text: (err?.response?.data?.message )? (err?.response?.data?.message): `Some error occured`\n      })\n      setValidationError(err?.response?.data?.errors);\n    });\n  }\n\n  const handleFromChange = (e) => {\n    const { name, value: newValue, type } = e.target;\n    const value = type === 'number' ? +newValue : newValue;\n    setFormData({\n      ...formData,\n      [name]: value ? value : '',\n    });\n  }\n  const handleCheckBox = (e) => {\n    setIsChecked(!isChecked);\n    setFormData({\n      ...formData,\n      'toc': !isChecked,\n    });\n  }\n\n  return (\n\n    <>\n      <Header /> \n        <div className='content-main-wrapper' >\n          <div id=\"contact-us\" className='contact-form form-top'>\n            <div className='container register'>\n              <div className='row'>\n                <div className='col-12'>\n                  <div className='heading'>\n                    <h3>Register</h3>\n                    {/* <p>Ilorem ipsum!</p> */}\n                  </div>\n                </div>\n            \n                  <div className='col-md-6 col-xs-12  col-sm-12 mx-auto'>\n                  <form onSubmit={handleSubmit} autoComplete=\"off\" >\n                    <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicname\">\n                      <Form.Control type=\"text\" placeholder=\"Enter Name\" autoComplete=\"off\"\n                        name=\"name\"\n                        value={formData?.name}\n                        onChange={(e) => handleFromChange(e)}\n                        className={`form-control ${hasErrorFor('name') ? 'is-invalid' : ''}`}\n                      />\n                      {renderErrorFor('name')}\n                    </Form.Group>\n                    <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicEmail\">\n                      <Form.Control type=\"email\" placeholder=\"Enter email\" autoComplete=\"off\"\n                        name=\"email\"\n                        value={formData?.email}\n                        onChange={(e) => handleFromChange(e)}\n                        className={`form-control ${hasErrorFor('email') ? 'is-invalid' : ''}`}\n                      />\n                      {renderErrorFor('email')}\n                    </Form.Group>\n                    <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicPhone\">\n                      <Form.Control type=\"number\" placeholder=\"Enter phone\" autoComplete=\"off\"\n                        name=\"phone\"\n                        value={formData?.phone}\n                        onChange={(e) => handleFromChange(e)}\n                        className={`form-control ${hasErrorFor('phone') ? 'is-invalid' : ''}`}\n                      />\n                      {renderErrorFor('phone')}\n                    </Form.Group>\n                    <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicpassword\">\n                      <Form.Control type=\"password\" placeholder=\"Enter password here\" autoComplete=\"off\"\n                        name=\"password\"\n                        value={formData?.password}\n                        onChange={(e) => handleFromChange(e)}\n                        className={`form-control ${hasErrorFor('password') ? 'is-invalid' : ''}`}\n                      />\n                      {renderErrorFor('password')}\n                    </Form.Group>\n                    <div  className=\"contact-form-error-wrapper\" controlid=\"formBasicMessage\">\n                      <div className='pt-4'>\n                        <Form.Check.Input checked={isChecked}  type={'checkbox'}  className={` mr-2 ${hasErrorFor('message') ? 'is-invalid' : ''}`} name=\"toc\"  onChange={(e) => handleCheckBox(e)}   />\n                        <Form.Check.Label className='text-white tnc-label'>  You agree to our <Link target={'_blank'} to=\"/term-of-services\" className='text-primary'>Terms and Conditions</Link>  </Form.Check.Label>\n                      </div>\n                      {renderErrorFor('toc')}\n                    </div>\n                    <Button variant=\"primary\" type=\"submit\">{loaded ?'Register':'...wait' }  </Button>\n                    {!loaded && (<Loader />)}\n                    \n                    <h5 className='text-white pt-4'>Already have an account  <Link className='text-primary' to={'/login'}>Login</Link> </h5>\n                  </form>\n                </div>\n              \n                \n              </div>\n            </div>\n          </div>\n        </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Registration;"],"names":["useState","validationError","setValidationError","name","email","phone","password","toc","formData","setFormData","loaded","setLoaded","hasErrorFor","field","renderErrorFor","className","isChecked","setIsChecked","handleSubmit","event","preventDefault","axios","process","then","res","Swal","icon","title","showConfirmButton","text","data","message","catch","err","response","errors","handleFromChange","e","target","newValue","value","type","id","onSubmit","autoComplete","controlid","placeholder","onChange","checked","to","variant"],"sourceRoot":""}