{"version":3,"file":"static/js/726.4c4c1deb.chunk.js","mappings":"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","sources":["components/contact-form.js","components/home.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\nimport axios from 'axios';\nimport Loader from './Loader/Loader';\n\nconst ContactForm = () => {\n  const [validationError, setValidationError] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    message: '',\n    toc: true,\n  });\n  const [isChecked,setIsChecked] = useState(true);\n  const [loaded, setLoaded] = useState(true);\n\n  const hasErrorFor = (field) => {\n    if (validationError) {\n      const error = (field in validationError);\n      if (error)\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  const renderErrorFor = (field) => {\n    if (hasErrorFor(field)) {\n      return (\n        <div className=\"error-wrapper\">\n          <span className='invalid-feedback'>\n            <strong>{validationError[field]}</strong>\n          </span>\n        </div>\n      )\n    }\n  }\n  const resetForm = () => setFormData({\n    name: '',\n    email: '',\n    phone: '',\n    message: '',\n    toc: true,\n  });\n  const handleSubmit = async event => {\n    setLoaded(false)\n    event.preventDefault()\n    axios.post(`${process.env.REACT_APP_API_ENDPOINT}/contact-us`, formData).then(res => {\n\n      resetForm();\n      setValidationError([]);\n      setLoaded(true)\n      Swal.fire({\n        icon: 'success',\n        title: 'Done',\n        showConfirmButton: true,\n        // timer: 1500,\n        text:  `${res?.data?.message}`\n      })\n    }).catch(err => {\n      setLoaded(true)\n      Swal.fire({\n        icon: 'error',\n        title: `Oops!`,\n        showConfirmButton: true,\n        // timer: 3000,\n        text: (err?.response?.data?.message )? (err?.response?.data?.message): `Some error occured`\n      })\n      setValidationError(err?.response?.data?.errors);\n    });\n\n\n  }\n\n  const handleFromChange = (e) => {\n    const { name, value: newValue, type } = e.target;\n    console.log(e.target);\n    const value = type === 'number' ? +newValue : newValue;\n    setFormData({\n      ...formData,\n      [name]: value ? value : '',\n    });\n  }\n  const handleCheckBox = (e) => {\n    setIsChecked(!isChecked);\n    setFormData({\n      ...formData,\n      'toc': !isChecked,\n    });\n  }\n\n  return (\n    <>\n      <div id=\"contact-us\" className='contact-form'>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-12'>\n              <div className='heading'>\n                <h3>The easiest way to buy\n                  and sell NFTs.</h3>\n                <p>Contact us today to find out what we can do for you!</p>\n              </div>\n            </div>\n            <div className='col-12'>\n              <form onSubmit={handleSubmit} autoComplete=\"off\" >\n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicname\">\n                  <Form.Control type=\"text\" placeholder=\"Enter Name\" autoComplete=\"off\"\n                    name=\"name\"\n                    value={formData?.name}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('name') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('name')}\n                </Form.Group>\n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicEmail\">\n                  <Form.Control type=\"email\" placeholder=\"Enter email\" autoComplete=\"off\"\n                    name=\"email\"\n                    value={formData?.email}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('email') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('email')}\n                </Form.Group>\n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicPhone\">\n                  <Form.Control type=\"number\" placeholder=\"Enter phone\" autoComplete=\"off\"\n                    name=\"phone\"\n                    value={formData?.phone}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('phone') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('phone')}\n                </Form.Group>\n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicMessage\">\n                  <Form.Control type=\"text\" placeholder=\"Enter message here\" autoComplete=\"off\"\n                    name=\"message\"\n                    as=\"textarea\"\n                    value={formData?.message}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('message') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('message')}\n                </Form.Group>\n                <div style={{\"display\":\"none\"}} className=\"contact-form-error-wrapper\" controlid=\"formBasicMessage\">\n                  <div className='pt-4'>\n                    <Form.Check.Input checked={isChecked}  type={'checkbox'}  className={` mr-2 ${hasErrorFor('message') ? 'is-invalid' : ''}`} name=\"toc\"  onChange={(e) => handleCheckBox(e)}   />\n                    <Form.Check.Label className='text-white tnc-label'>  You agree to our Terms and Conditions</Form.Check.Label>\n                  </div>\n                  {renderErrorFor('toc')}\n                </div>\n                <Button variant=\"primary\" type=\"submit\">{loaded ?'Submit':'...wait' }  </Button>\n                {!loaded && (<Loader />)}\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactForm;","import React from 'react';\nimport ContactForm from './contact-form';\n\nconst  Header = React.lazy(() => import('./includes/header'));\nconst  Footer = React.lazy(() => import('./includes/footer'));\nconst  BuyNFT = React.lazy(() => import('./buy-nft'));\nconst  HowToBuyNFT = React.lazy(() => import('./how-to-buy'));\nconst  HowItWorks = React.lazy(() => import('./how-it-works'));\nconst  BlockchainsWeSupport = React.lazy(() => import('./blockchains-we-support'));\nconst  Faqs = React.lazy(() => import('./faqs'));\n\n\nfunction Home() {\n\n  return (\n\n    <>\n     \n        <Header />\n        <BuyNFT />\n        <HowToBuyNFT />\n        <HowItWorks />\n        <BlockchainsWeSupport />\n        <Faqs />\n        <ContactForm />\n        <Footer />\n     \n    </>\n  );\n};\n\nexport default Home;"],"names":["useState","validationError","setValidationError","name","email","phone","message","toc","formData","setFormData","isChecked","setIsChecked","loaded","setLoaded","hasErrorFor","field","renderErrorFor","className","handleSubmit","event","preventDefault","axios","process","then","res","Swal","icon","title","showConfirmButton","text","data","catch","err","response","errors","handleFromChange","e","target","newValue","value","type","console","log","id","onSubmit","autoComplete","Form","controlid","placeholder","onChange","as","style","checked","Button","variant","Loader","Header","React","Footer","BuyNFT","HowToBuyNFT","HowItWorks","BlockchainsWeSupport","Faqs"],"sourceRoot":""}