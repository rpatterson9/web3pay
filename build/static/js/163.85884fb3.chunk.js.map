{"version":3,"file":"static/js/163.85884fb3.chunk.js","mappings":"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","sources":["components/forgot-password.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useState } from 'react';\nimport Loader from './Loader/Loader'\nimport { Form,Button } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\nimport Header from './includes/header';\nimport Footer from './includes/footer';\n\n\n\n\nconst  ForgotPassword = () => {\n \n  const [validationError, setValidationError] = useState([]);\n  const [formData, setFormData] = useState({\n    email: '',\n  });\n  const [loaded, setLoaded] = useState(true);\n  const [resetLinkSent, setResetLinkSent] = useState(false);\n  const [recallResetLink, setRecallResetLink] = useState(false);\n  const [resetSuccessMessage,setResetSuccessMessage] = useState('');\n\n  \n\n  \n\n  const hasErrorFor = (field) => {\n    if (validationError) {\n      const error = (field in validationError);\n      if (error)\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n\n  const renderErrorFor = (field) => {\n    if (hasErrorFor(field)) {\n      return (\n        <div className=\"error-wrapper\">\n          <span className='invalid-feedback'>\n            <strong>{validationError[field]}</strong>\n          </span>\n        </div>\n      )\n    }\n  }\n\n\n  const handleSubmit = async event => {\n   \n    setLoaded(false)\n    setRecallResetLink(false);\n    setResetSuccessMessage('');\n    event.preventDefault()\n    axios.post(`${process.env.REACT_APP_API_ENDPOINT}/password/remind`, formData).then(res => {\n\n      setValidationError([]);\n      setLoaded(true)\n      setResetSuccessMessage(`${res?.data?.message}`);\n      setResetLinkSent(true);\n      setTimeout(() => {\n        setRecallResetLink(true);\n      }, 60000);\n      Swal.fire({\n        icon: 'success',\n        title: 'Done',\n        showConfirmButton: true,\n        // timer: 2000,\n        text:  `${res?.data?.message}`\n      })\n    }).catch(err => {\n      setLoaded(true)\n      Swal.fire({\n        icon: 'error',\n        title: `Oops!`,\n        showConfirmButton: true,\n        // timer: 3000,\n        text: (err?.response?.data?.message )? (err?.response?.data?.message): `Some error occured`\n      })\n      setValidationError(err?.response?.data?.errors);\n    });\n\n\n  }\n\n  const handleFromChange = (e) => {\n    const { name, value: newValue, type } = e.target;\n    const value = type === 'number' ? +newValue : newValue;\n    setFormData({\n      ...formData,\n      [name]: value ? value : '',\n    });\n  }\n \n  return (\n    <>\n      <Header />\n      <div id=\"\" className='contact-form form-top'>\n        <div className='container'>\n          <div className='row d-flex justify-content-center'>\n            <div className='col-12'>\n              <div className='heading'>\n                <h3>Forgot Password</h3>\n              </div>\n            </div>\n            <div className='col-md-6 col-xs-12  col-sm-12 mx-auto'>\n              {resetLinkSent?(\n                <div className='text-center'>\n                  <h4 className='mt-5 text-white'>{resetSuccessMessage}</h4>\n                  <p>If you do not receive an email , please click the Resend email link below after  60 sec.</p>\n                  {recallResetLink ? (<Button variant=\"primary\" className='mt-2' onClick={handleSubmit} >{loaded ?'Resend email':'...wait' }  </Button>)\n                    : (<Button variant=\"primary\" className='mt-2' disabled={true} onClick={handleSubmit} > {loaded ?'Resend email':'...wait' }  </Button>)}\n                </div>\n              ):(\n                 <form onSubmit={handleSubmit} autoComplete=\"off\" >\n                \n                 <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicEmail\">\n                   <Form.Control type=\"email\"  placeholder=\"Enter email\" autoComplete=\"off\"\n                     name=\"email\"\n                     value={formData?.email}\n                     onChange={(e) => handleFromChange(e)}\n                     className={`form-control ${hasErrorFor('email') ? 'is-invalid' : ''}`}\n                   />\n                   {renderErrorFor('email')}\n                 </Form.Group>\n                 <Button variant=\"primary\" type=\"submit\">{loaded ?'Submit':'...wait' }  </Button>\n                 {!loaded && (<Loader />)}\n               </form>\n              )}\n             \n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default ForgotPassword;"],"names":["useState","validationError","setValidationError","email","formData","setFormData","loaded","setLoaded","resetLinkSent","setResetLinkSent","recallResetLink","setRecallResetLink","resetSuccessMessage","setResetSuccessMessage","hasErrorFor","field","handleSubmit","event","preventDefault","axios","process","then","res","data","message","setTimeout","Swal","icon","title","showConfirmButton","text","catch","err","response","errors","id","className","variant","onClick","disabled","onSubmit","autoComplete","controlid","type","placeholder","name","value","onChange","e","target","newValue","handleFromChange","renderErrorFor"],"sourceRoot":""}