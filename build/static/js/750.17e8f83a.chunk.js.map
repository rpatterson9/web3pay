{"version":3,"file":"static/js/750.17e8f83a.chunk.js","mappings":"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","sources":["components/reset-password.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation} from 'react-router-dom';\nimport Loader from './Loader/Loader'\nimport { useNavigate  } from 'react-router'\nimport { Form,Button } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\n\n\n\n\nconst  ResetPassword = () => {\n  const location =  useLocation();\n  const search = location.search;\n  const navigate =  useNavigate();\n  const urlPrams = new URLSearchParams(search)\n  const token = urlPrams.get('token');\n  const email = atob(urlPrams.get('uhash'));\n  const [validationError, setValidationError] = useState([]);\n  const [formData, setFormData] = useState({\n    email: email,\n    password: '',\n    token: token,\n    password_confirmation: '',\n  });\n  const [loaded, setLoaded] = useState(true);\n  \n  useEffect(()=>{\n    if(!token){\n      navigate('/login');\n    }\n  },[])\n\n  const hasErrorFor = (field) => {\n    if (validationError) {\n      const error = (field in validationError);\n      if (error)\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  const renderErrorFor = (field) => {\n    if (hasErrorFor(field)) {\n      return (\n        <div className=\"error-wrapper\">\n          <span className='invalid-feedback'>\n            <strong>{validationError[field]}</strong>\n          </span>\n        </div>\n      )\n    }\n  }\n\n  const resetForm = () => setFormData({\n    email: email,\n    password_confirmation: '',\n    token: token,\n    password: '',\n  });\n\n  const handleSubmit = async event => {\n    setLoaded(false)\n    event.preventDefault()\n    axios.post(`${process.env.REACT_APP_API_ENDPOINT}/password/reset`, formData).then(res => {\n\n      resetForm();\n      setValidationError([]);\n      setLoaded(true)\n      Swal.fire({\n        icon: 'success',\n        title: 'Done',\n        showConfirmButton: true,\n        // timer: 2000,\n        text:  `${res?.data?.message}`\n      })\n      navigate('/login');\n    }).catch(err => {\n      setLoaded(true)\n      Swal.fire({\n        icon: 'error',\n        title: `Oops!`,\n        showConfirmButton: true,\n        // timer: 3000,\n        text: (err?.response?.data?.message )? (err?.response?.data?.message): `Some error occured`\n      })\n      setValidationError(err?.response?.data?.errors);\n    });\n\n\n  }\n\n  const handleFromChange = (e) => {\n    const { name, value: newValue, type } = e.target;\n    const value = type === 'number' ? +newValue : newValue;\n    setFormData({\n      ...formData,\n      [name]: value ? value : '',\n    });\n  }\n \n  return (\n    <>\n      <div id=\"contact-us\" className='contact-form form-top'>\n        <div className='container'>\n          <div className='row d-flex justify-content-center'>\n            <div className='col-12'>\n              <div className='heading'>\n                <h3>Reset Password</h3>\n              </div>\n            </div>\n            <div className='col-md-6 col-xs-12  col-sm-12 mx-auto'>\n              <form onSubmit={handleSubmit} autoComplete=\"off\" >\n                \n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicEmail\">\n                  <Form.Control type=\"email\"  placeholder=\"Enter email\" autoComplete=\"off\"\n                    name=\"email\"\n                    readOnly={true}\n                    value={formData?.email}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('email') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('email')}\n                </Form.Group>\n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicPhone\">\n                  <Form.Control type=\"password\" placeholder=\"Enter password\" autoComplete=\"off\"\n                    name=\"password\"\n                    value={formData?.phone}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('password') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('password')}\n                </Form.Group>\n                <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicPhone\">\n                  <Form.Control type=\"password\" placeholder=\"Confirmation password\" autoComplete=\"off\"\n                    name=\"password_confirmation\"\n                    value={formData?.phone}\n                    onChange={(e) => handleFromChange(e)}\n                    className={`form-control ${hasErrorFor('password_confirmation') ? 'is-invalid' : ''}`}\n                  />\n                  {renderErrorFor('password_confirmation')}\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">{loaded ?'Submit':'...wait' }  </Button>\n                {!loaded && (<Loader />)}\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ResetPassword;"],"names":["search","useLocation","navigate","useNavigate","urlPrams","URLSearchParams","token","get","email","atob","useState","validationError","setValidationError","password","password_confirmation","formData","setFormData","loaded","setLoaded","useEffect","hasErrorFor","field","renderErrorFor","className","handleSubmit","event","preventDefault","axios","process","then","res","Swal","icon","title","showConfirmButton","text","data","message","catch","err","response","errors","handleFromChange","e","target","name","newValue","value","type","id","onSubmit","autoComplete","controlid","placeholder","readOnly","onChange","phone","variant"],"sourceRoot":""}