{"version":3,"file":"static/js/751.d23c3aae.chunk.js","mappings":"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","sources":["components/contactSupport.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Footer from \"./includes/footer\";\nimport Header from \"./includes/header\";\nimport { Form, Button } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\nimport axios from 'axios';\nimport Loader from './Loader/Loader';\n\nconst ContactSupport = () => {\n    const [validationError, setValidationError] = useState([]);\n    const [formData, setFormData] = useState({\n      name: '',\n      email: '',\n      phone: '',\n      message: '',\n      toc: true,\n    });\n    const [isChecked,setIsChecked] = useState(true);\n    const [loaded, setLoaded] = useState(true);\n  \n    const hasErrorFor = (field) => {\n      if (validationError) {\n        const error = (field in validationError);\n        if (error)\n          return true;\n      } else {\n        return false;\n      }\n    }\n  \n    const renderErrorFor = (field) => {\n      if (hasErrorFor(field)) {\n        return (\n          <div className=\"error-wrapper\">\n            <span className='invalid-feedback'>\n              <strong>{validationError[field]}</strong>\n            </span>\n          </div>\n        )\n      }\n    }\n    const resetForm = () => setFormData({\n      name: '',\n      email: '',\n      phone: '',\n      message: '',\n      toc: true,\n    });\n    const handleSubmit = async event => {\n      setLoaded(false)\n      event.preventDefault()\n      axios.post(`${process.env.REACT_APP_API_ENDPOINT}/contact-us`, formData).then(res => {\n  \n        resetForm();\n        setValidationError([]);\n        setLoaded(true)\n        Swal.fire({\n          icon: 'success',\n          title: 'Done',\n          showConfirmButton: true,\n          // timer: 1500,\n          text:  `${res?.data?.message}`\n        })\n      }).catch(err => {\n        setLoaded(true)\n        Swal.fire({\n          icon: 'error',\n          title: `Oops!`,\n          showConfirmButton: true,\n          // timer: 3000,\n          text: (err?.response?.data?.message )? (err?.response?.data?.message): `Some error occured`\n        })\n        setValidationError(err?.response?.data?.errors);\n      });\n  \n  \n    }\n  \n    const handleFromChange = (e) => {\n      const { name, value: newValue, type } = e.target;\n      console.log(e.target);\n      const value = type === 'number' ? +newValue : newValue;\n      setFormData({\n        ...formData,\n        [name]: value ? value : '',\n      });\n    }\n    const handleCheckBox = (e) => {\n      setIsChecked(!isChecked);\n      setFormData({\n        ...formData,\n        'toc': !isChecked,\n      });\n    }\n    return (\n\n                <>\n                  <Header />\n                  \n                    <div className=\"container \">\n                        <div id=\"\" className='other-pages-wrapper'>\n                            <div className=\"row\">\n            \n                                <div className=\"col-md-6 center-on-mobile\">\n                                    <h1 className=\"hide-hsupport-heading-on-mobile\">Support</h1>\n                                    <p>If you have any question reach out to our customer support team or visit our <br/> <a className=\"text-primary\" href=\"/#faq\" >FAQs page</a> </p>\n                                    <div className=\"row support-wrapper\">\n                                        <div className=\"col-md-6\">\n                                            <img className=\"pt-3\" src=\"images/mail.svg\" alt=\"mail\" />\n                                            <h4>Email support</h4>\n                                            <p><a href=\"mailto:support@Web3Pay.xyz\"> support@Web3Pay.xyz</a> </p>\n                                            <a href=\"mailto:support@Web3Pay.xyz\" className=\"btn btn-outline-secondary\">Reach out</a>\n\n                                        </div>\n                                        {/* <div className=\"col-md-6\">\n                                        <img className=\"pt-3\" src=\"images/discord.svg\" alt=\"discord\" />\n                                            <h4>Live support</h4>\n                                            <p><a href=\"https://discord.com/\"> Join us on discord</a> </p>\n                                            <a href=\"https://discord.com/\" className=\"btn btn-outline-secondary\">Join Discord</a>\n\n\n                                        </div> */}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                <p>Contact us today to find out what we can do for you!</p>\n                                    <div className=''>\n                                        <form onSubmit={handleSubmit} autoComplete=\"off\" >\n                                            <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicname\">\n                                            <Form.Control  type=\"text\" placeholder=\"Enter Name\" autoComplete=\"off\"\n                                                name=\"name\"\n                                                value={formData?.name}\n                                                onChange={(e) => handleFromChange(e)}\n                                                className={`form-control dark ${hasErrorFor('name') ? 'is-invalid' : ''}`}\n                                            />\n                                            {renderErrorFor('name')}\n                                            </Form.Group><br/>\n                                            <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicEmail\">\n                                            <Form.Control type=\"email\" placeholder=\"Enter email\" autoComplete=\"off\"\n                                                name=\"email\"\n                                                value={formData?.email}\n                                                onChange={(e) => handleFromChange(e)}\n                                                className={`form-control dark ${hasErrorFor('email') ? 'is-invalid' : ''}`}\n                                            />\n                                            {renderErrorFor('email')}\n                                            </Form.Group><br/>\n                                            <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicPhone\">\n                                            <Form.Control type=\"number\" placeholder=\"Enter phone\" autoComplete=\"off\"\n                                                name=\"phone\"\n                                                value={formData?.phone}\n                                                onChange={(e) => handleFromChange(e)}\n                                                className={`form-control dark ${hasErrorFor('phone') ? 'is-invalid' : ''}`}\n                                            />\n                                            {renderErrorFor('phone')}\n                                            </Form.Group><br/>\n                                            <Form.Group className=\"contact-form-error-wrapper\" controlid=\"formBasicMessage\">\n                                            <Form.Control type=\"text\" placeholder=\"Enter message here\" autoComplete=\"off\"\n                                                name=\"message\"\n                                                as=\"textarea\"\n                                                value={formData?.message}\n                                                onChange={(e) => handleFromChange(e)}\n                                                className={`form-control dark ${hasErrorFor('message') ? 'is-invalid' : ''}`}\n                                            />\n                                            {renderErrorFor('message')}\n                                            </Form.Group><br/>\n                                            <div className=\"contact-form-error-wrapper\" controlid=\"formBasicMessage\">\n                                            <div className='pt-4' style={{'display':'none'}} >\n                                                <Form.Check.Input checked={isChecked}  type={'checkbox'}  className={` mr-2 ${hasErrorFor('message') ? 'is-invalid' : ''}`} name=\"toc\"  onChange={(e) => handleCheckBox(e)}   />\n                                                <Form.Check.Label className='tnc-label'>  You agree to our Terms and Conditions</Form.Check.Label>\n                                            </div>\n                                            {renderErrorFor('toc')}\n                                            </div><br/>\n                                            <Button variant=\"primary\" type=\"submit\">{loaded ?'Submit':'...wait' }  </Button>\n                                            {!loaded && (<Loader />)}\n                                            \n                                        </form>\n                                        </div>\n                                </div>\n                            </div>\n                        \n                        </div>\n                    </div>\n                    <Footer />\n                </>\n            );\n    \n}\n\nexport default ContactSupport"],"names":["useState","validationError","setValidationError","name","email","phone","message","toc","formData","setFormData","isChecked","setIsChecked","loaded","setLoaded","hasErrorFor","field","renderErrorFor","className","handleSubmit","event","preventDefault","axios","process","then","res","Swal","icon","title","showConfirmButton","text","data","catch","err","response","errors","handleFromChange","e","target","newValue","value","type","console","log","id","href","src","alt","onSubmit","autoComplete","controlid","placeholder","onChange","as","style","checked","variant"],"sourceRoot":""}